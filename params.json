{
  "name": "Zjyywjq.GitHub.io",
  "tagline": "Business Analysis Assignment",
  "body": "# zjyywjq.github.io\r\nWelcome to Jieqiong Wu's github.\r\nThis is Business Analysis Assignment8 - A topic model of Amazon food reviews analysis.\r\n\r\n# A topic model of Amazon food reviews analysis.\r\n\r\n## Summary\r\n\r\nI did the Amazon food reviews analysis in this project. In this project, I run an LDA topic models analysis for Amazon's Customer Reviews, more specifically, the Automotive reviews (can be found at: https://www.kaggle.com/snap/amazon-fine-food-reviews). I used the R package lda model and visualized the output using LDAvis. I will introduce all the details below:\r\n\r\n## Result Analysis\r\n\r\nAccording to my result, topic 2 and 5 have a great overlaps, In all the food package in this Amazon store, these customers like tea and chips for the most. Topic 1 and 7 have some-level overlap, mostly focused on flavor and br which is brand. Topic 3 is very close to topic 2,5,7, and 1, showing that these 5 are all in the same category.  Topic 6, 10 and 4 are in the other side of 3,2,5,7,and 1. There customers are more focused on energy, sugar and coffee, which is also in the same category but a little far from the first category. Topic 8 is dog, which is one word of hot dog. So that it is very far away from others. Topic 9 is also very far from others. It is great, which is a level word to show the level of likeliness customers think about the food.\r\n\r\n## The Data\r\nLoad the data of Amazon food reviews from my desktop. The data can be found at https://www.kaggle.com/snap/amazon-fine-food-reviews. \r\n\r\n    #Load the Data\r\n    re<- read.csv(\"/Users/jieqiongwu/Desktop/foodreviewtext.csv\", header=T,stringsAsFactors = F)\r\n    reviews<-re$Reviews\r\n    str(reviews)\r\n\r\n## Pre-processing\r\nBefore fitting a topic model, we need to tokenize the text. This dataset is fairly clean, so we only remove punctuation and some common stop words. In particular, we use the english stop words from the SMART information retrieval system.\r\n\r\n    # read in some stopwords:\r\n    library(tm)\r\n    stop_words <- stopwords(\"SMART\")\r\n    \r\n    # pre-processing:\r\n    reviews <- gsub(\"'\", \"\", reviews) \r\n    reviews <- gsub(\"[[:punct:]]\", \" \", reviews)  \r\n    reviews <- gsub(\"[[:cntrl:]]\", \" \", reviews) \r\n    reviews <- gsub(\"^[[:space:]]+\", \"\", reviews) \r\n    reviews <- gsub(\"[[:space:]]+$\", \"\", reviews) \r\n    reviews <- tolower(reviews)  \r\n    \r\n    # tokenize on space and output as a list:\r\n    doc.list <- strsplit(reviews, \"[[:space:]]+\")\r\n    \r\n    # compute the table of terms:\r\n    term.table <- table(unlist(doc.list))\r\n    term.table <- sort(term.table, decreasing = TRUE)\r\n    \r\n    # remove terms that are stop words or occur fewer than 5 times:\r\n    del <- names(term.table) %in% stop_words | term.table < 5\r\n    term.table <- term.table[!del]\r\n    vocab <- names(term.table)\r\n    \r\n    # now put the documents into the format required by the lda package:\r\n    get.terms <- function(x) {\r\n      index <- match(x, vocab)\r\n      index <- index[!is.na(index)]\r\n      rbind(as.integer(index - 1), as.integer(rep(1, length(index))))\r\n    }\r\n     documents <- lapply(doc.list, get.terms)\r\n\r\n## Using the R package 'lda' for model fitting\r\n\r\nThe object documents is a large list, in which each element represents one text document. After creating this list, we compute a few statistics about the corpus, such as length and vocabulary counts:\r\n\r\n    # Compute some statistics related to the data set:\r\n    D <- length(documents) \r\n    W <- length(vocab)  \r\n    doc.length <- sapply(documents, function(x) sum(x[2, ])) \r\n    N <- sum(doc.length)  \r\n    term.frequency <- as.integer(term.table)  \r\n\r\nNext, we set up a topic model with 10 topics, relatively diffuse priors for the topic-term distributions (ηη = 0.02) and document-topic distributions (αα = 0.02), and we set the collapsed Gibbs sampler to run for 300 iterations (slightly conservative to ensure convergence). A visual inspection of fit$log.likelihood shows that the MCMC algorithm has converged after 300 iterations. This block of code takes about 0.19 minute to run on a laptop using a single core 1.7Ghz processor (and 8GB RAM).\r\n\r\n    # MCMC and model tuning parameters:\r\n    K <- 10\r\n    G <- 300\r\n    alpha <- 0.02\r\n    eta <- 0.02\r\n    \r\n    # Fit the model:\r\n    library(lda)\r\n    set.seed(369)\r\n    t1 <- Sys.time()\r\n    fit <- lda.collapsed.gibbs.sampler(documents = documents, K = K, vocab = vocab, \r\n                                       num.iterations = G, alpha = alpha, \r\n                                       eta = eta, initial = NULL, burnin = 0,\r\n                                       compute.log.likelihood = TRUE)\r\n    t2 <- Sys.time()\r\n    t2 - t1  \r\n\r\n## Visualizing the fitted model with LDAvis\r\n\r\nTo visualize the result using LDAvis, we'll need estimates of the document-topic distributions, which we denote by the D×KD×K matrix θθ, and the set of topic-term distributions, which we denote by the K×WK×W matrix ϕϕ. We estimate the “smoothed” versions of these distributions (“smoothed” means that we've incorporated the effects of the priors into the estimates) by cross-tabulating the latent topic assignments from the last iteration of the collapsed Gibbs sampler with the documents and the terms, respectively, and then adding pseudocounts according to the priors. A better estimator might average over multiple iterations of the Gibbs sampler (after convergence, assuming that the MCMC is sampling within a local mode and there is no label switching occurring), but we won't worry about that for now.\r\n\r\n    theta <- t(apply(fit$document_sums + alpha, 2, function(x) x/sum(x)))\r\n    phi <- t(apply(t(fit$topics) + eta, 2, function(x) x/sum(x)))\r\n\r\nWe've already computed the number of tokens per document and the frequency of the terms across the entire corpus. We save these, along with ϕϕ, θθ, and vocab, in a list as the data object MovieReviews, which is included in the LDAvis package.\r\n    \r\n    foodreviews<- list(phi = phi,\r\n                                 theta = theta,\r\n                                 doc.length = doc.length,\r\n                                 vocab = vocab,\r\n                                 term.frequency = term.frequency)\r\n\r\nNow we're ready to call the createJSON() function in LDAvis. This function will return a character string representing a JSON object used to populate the visualization. The createJSON() function computes topic frequencies, inter-topic distances, and projects topics onto a two-dimensional plane to represent their similarity to each other. It also loops through a grid of values of a tuning parameter, 0≤λ≤10≤λ≤1, that controls how the terms are ranked for each topic, where terms are listed in decreasing of relevance, where the relevance of term ww to topic tt is defined as λ×p(w∣t)+(1−λ)×p(w∣t)/p(w)λ×p(w∣t)+(1−λ)×p(w∣t)/p(w). Values of λλ near 1 give high relevance rankings to frequent terms within a given topic, whereas values of λλ near zero give high relevance rankings to exclusive terms within a topic. The set of all terms which are ranked among the top-R most relevant terms for each topic are pre-computed by the createJSON() function and sent to the browser to be interactively visualized using D3 as part of the JSON object.\r\n\r\n    library(LDAvis)\r\n    library(servr)\r\n    # create the JSON object to feed the visualization:\r\n    json <- createJSON(phi = foodreviews$phi, \r\n                       theta = foodreviews$theta, \r\n                       doc.length = foodreviews$doc.length, \r\n                       vocab = foodreviews$vocab, \r\n                       term.frequency = foodreviews$term.frequency)\r\n\r\nThe serVis() function can take json and serve the result in a variety of ways. Here we'll write json to a file within the 'vis' directory (along with other HTML and JavaScript required to render the page). You can see the result at :https://zjyywjq.github.io/amazon.food.reviews.analysis/\r\n\r\n    serVis(json, out.dir = 'visassignment1', open.browser = TRUE)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}